#!/bin/bash

SHOULD_NOT_RUN_CERTBOT="$1"
DISABLE_DEBUG="$2"

VHOSTS="${VHOSTD}"
LOG="${NGINX_SITES_LOG}"
# NOTE: All cluster nodes should share challenges
LOCK="${CERT_DIR}/.lck"

. /usr/bin/nginx-utils.sh


# https://github.com/acmesh-official/acme.sh
ACME_CMD="acme.sh --issue \
--config-home '${CERT_DIR}/config' \
--accountemail '${CERT_EMAIL}' \
-w '${CERT_DIR}' -k 4096"

if [ "${CERT_STAGING}" = "true" ]; then
    ACME_CMD="${ACME_CMD} --staging"
fi
if [ "${CERT_CHALLENGE_TYPE}" = "alpn" ]; then
    ACME_CMD="${ACME_CMD} --alpn --tlsport 21443"
fi
if [ "${CERT_CHALLENGE_TYPE}" = "dns" ]; then
    ACME_CMD="${ACME_CMD} --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please"
fi


get_top_domains() {
    echo "$@" | sed -E 's/\s+/\n/g' | awk -F. '{
        if ( length($3) == 0 ) { print $1"."$2 }
        else if ( length($4) == 0 ) { print $2"."$3 }
        else if ( length($5) == 0 ) { print $2"."$3"."$4 }
        else if ( length($6) == 0 ) { print $2"."$3"."$4"."$5 }
    }'
}

get_domain_conf() {
    local domain="$1"
    local domain_conf="${VHOSTS}/${domain}.conf"

    if [ ! -e "${domain_conf}" ]; then
        domain_conf="$(grep -rl -E "\binclude .*/${domain}/.+;" ${VHOSTS}/*.conf | head -n 1)"
    fi
    if [ ! -e "${domain_conf}" ]; then
        echo ""
    else
        echo "${domain_conf}"
    fi
}

is_matched_domain_list() {
    local domain="$1"
    local domains=( "$2" )
    local top_domain=$(get_top_domains ${domain})

    local matched="false"
    for d in "${domains[@]}"; do
        if [[ "${top_domain}" = "${d}" || "${domain}" = "${d}" ]]; then
            matched="true"
            break
        fi
    done

    [[ "${matched}" = "true" ]]
}

update_ssl_confs() {
    local domain="$1"
    local domain_conf="$2"
    local domain_cert_dir="$3"
    local domain_sub_dir="${VHOSTS}/${domain}"
    local domain_log_dir="${LOG}/${domain}"

    mkdir -p "${domain_sub_dir}"

    echo "Create ${domain_sub_dir}/01_ssl.conf ..."
    cat > "${domain_sub_dir}/01_ssl.conf" <<EOF
# SSL and OCSP Stapling
ssl_stapling on;
ssl_stapling_verify on;

ssl_certificate ${domain_cert_dir}/fullchain.pem;
ssl_certificate_key ${domain_cert_dir}/privkey.pem;
ssl_trusted_certificate ${domain_cert_dir}/chain.pem;
EOF

    echo "Create ${domain_sub_dir}/02_log.conf ..."
    cat > "${domain_sub_dir}/02_log.conf" <<EOF
# Error and access log
error_log ${domain_log_dir}/error.log debug;
access_log ${domain_log_dir}/access\$logdate.log main;
EOF

    echo "Create ${domain_sub_dir}/03_epage.conf ..."
    cat > "${domain_sub_dir}/03_epage.conf" <<EOF
# Custom error page
include /etc/nginx/epage.d/*.conf;
EOF
}

is_all_certs_existing_in() {
    local cert_dir="$1"
    local cert_files=(
        "${cert_dir}/chain.pem"
        "${cert_dir}/cert.pem"
        "${cert_dir}/privkey.pem"
        "${cert_dir}/fullchain.pem"
    )

    local all_exists="true"
    for cert in "${cert_files[@]}"; do
        if [[ ! -f "${cert}" ]]; then
            all_exists="false"
            break
        fi
    done

    [[ "${all_exists}" = "true" ]]
}

update_http_acme() {
    local domain="$1"
    local domain_conf="$2"
    local domain_sub_dir="${VHOSTS}/${domain}"
    local domain_log_dir="${LOG}/${domain}"
    local domain_cert_dir="${CERT_DIR}/certs/${domain}"

    if is_all_certs_existing_in "${domain_cert_dir}"; then
        # just make sure the ssl.conf exist
        update_ssl_confs "${domain}" "${domain_conf}" "${domain_cert_dir}"
        return
    fi

    echo "Remove ${domain_sub_dir}/01_ssl.conf for new one ..."
    rm -f "${domain_sub_dir}/01_ssl.conf"

    if [ "${SHOULD_NOT_RUN_CERTBOT}" = "true" ]; then
        update_server_ssl_for "${domain_conf}"
        return
    fi

    if [ "${CERT_CHALLENGE_TYPE}" = "alpn" ]; then
        if [ "x$(grep -E 'listen .*\b443\b' "${domain_conf}")" != "x" ]; then
            sed -i -E 's/(listen .*)\b443\b(.*);/\120443\2;/g;' "${domain_conf}"
        fi
    fi

    # https://www.vermouthx.com/2018/09/16/acme-sh/
    eval "${ACME_CMD} -d ${domain} \
            --ca-file '${domain_cert_dir}/chain.pem' \
            --cert-file '${domain_cert_dir}/cert.pem' \
            --key-file '${domain_cert_dir}/privkey.pem' \
            --fullchain-file '${domain_cert_dir}/fullchain.pem' \
            2>/dev/null"
    if [[ "$?" != "0" ]]; then
        echo "Can not update certificate for ${domain}."
        return
    fi

    update_ssl_confs "${domain}" "${domain_conf}" "${domain_cert_dir}"
}

update_dns_acme() {
    local domain="$1"
    local domain_cert_dir="${CERT_DIR}/certs/${domain}"

    if is_all_certs_existing_in "${domain_cert_dir}"; then
        [[ 1 -eq 0 ]] # false
        return
    fi

    cmd="${ACME_CMD} -d ${domain} -d '*.${domain}'"

    eval "${cmd}" 2>&1 | sed '/integer expression expected/d'

    echo "Check if TXT is valid by running: dig -t TXT _acme-challenge.${domain}"

    read -p "Added TXT value for domain: _acme-challenge.${domain}? (Y/N): "  confirm
    if [[ "${confirm}" != "Y" && "${confirm}" != "y" ]]; then
        [[ 1 -eq 0 ]] # false
        return
    fi

    eval "${cmd} --renew" 2>/dev/null
    if [[ "$?" != "0" ]]; then
        [[ 1 -eq 0 ]] # false
        return
    fi

    eval "acme.sh \
            --install-cert \
            --config-home '${CERT_DIR}/config' \
            -d ${domain} \
            --ca-file '${domain_cert_dir}/chain.pem' \
            --cert-file '${domain_cert_dir}/cert.pem' \
            --key-file '${domain_cert_dir}/privkey.pem' \
            --fullchain-file '${domain_cert_dir}/fullchain.pem'"

    [[ "$?" != "0" ]]
}


if [ -e ${LOCK} ]; then
    echo "Other is updating certs now. Exit!"
    exit 0
else
    touch ${LOCK}
fi


# include /etc/nginx/vhost.d/<domain-name>/*.conf;
domains=( $(get_server_names_from "${VHOSTS}") )

http_mode_domains=( "${domains[@]}" )
dns_mode_domains=( )
if [ "${CERT_CHALLENGE_TYPE}" = "dns" ]; then
    http_mode_domains=(  )
    top_domains=(
        $(get_top_domains ${domains[@]} | sort | uniq)
    )
    for top_domain in "${top_domains[@]}"; do
        read -p "Use DNS acme mode for domain: *.${top_domain}? (Y/N): "  confirm
        if [[ "${confirm}" != "Y" && "${confirm}" != "y" ]]; then
            http_mode_domains+=( "${top_domain}" )
            continue
        fi

        echo "Update certificate in DNS mode for ${top_domain}."
        if update_dns_acme "${top_domain}"; then
            dns_mode_domains+=( "${top_domain}" )
        fi
    done
fi

for domain in "${domains[@]}"; do
    domain_sub_dir="${VHOSTS}/${domain}"
    domain_conf="$(get_domain_conf "${domain}")"

    if [ "x${domain_conf}" = "x" ]; then
        echo "No configuration file found for the domain ${domain}, skip it."
        continue
    fi

    if [[ "${domains[@]}" = "${http_mode_domains[@]}" ]] || is_matched_domain_list "${domain}" "${http_mode_domains[@]}"; then
        if [ "${DISABLE_DEBUG}" != "true" ]; then
            set -x
        fi
        update_http_acme "${domain}" "${domain_conf}"
        set +x
    elif is_matched_domain_list "${domain}" "${dns_mode_domains[@]}"; then
        top_domain=$(get_top_domains ${domain})
        domain_cert_dir="${CERT_DIR}/certs/${top_domain}"

        update_ssl_confs "${domain}" "${domain_conf}" "${domain_cert_dir}"
    else
        echo "Can not update certificate for ${domain}."
    fi
done


chown -R nginx:nginx ${VHOSTS} ${CERT_DIR}/certs \
    && chmod go-rw -R ${VHOSTS} ${CERT_DIR}/certs

rm ${LOCK}
