#!/bin/bash

VHOSTS="${VHOSTD}"
LOG="${NGINX_SITES_LOG}"
# NOTE: All cluster nodes should share challenges
LOCK="${CERTBOT}/.lck"

if [ "x$LOCK" = "x" ]; then
    echo "CERTBOT_LOCK is undefined."
    exit 1
fi

if [ -e ${LOCK} ]; then
    echo "Other is updating certs now. Exit!"
    exit 0
else
    touch ${LOCK}
fi


ACME_CMD="acme.sh --issue \
--config-home '${CERT_DIR}/config' \
--accountemail '${CERT_EMAIL}' \
-w '${CERT_DIR}' -k 4096"

if [ "${CERT_STAGING}" = "true" ]; then
    ACME_CMD="${ACME_CMD} --staging"
fi
if [ "${CERT_CHALLENGE_TYPE}" = "alpn" ]; then
    ACME_CMD="${ACME_CMD} --alpn --tlsport 21443"
fi

# include /etc/nginx/vhost.d/<domain-name>/*.conf;
DOMAINS=`find ${VHOSTS} -maxdepth 1 -name "*.conf" -exec grep -E "\binclude\s+${VHOSTS}/.+;" {} \; | sed -E "s/.*\binclude\b.*\/([^\/]+)\/[^\/]+/\1/g;" | sort | uniq`
for domain in `echo $DOMAINS | sed "s/\s\+/\n/g"`; do
    domain_sub_dir="${VHOSTS}/${domain}"
    domain_log_dir="${LOG}/${domain}"
    domain_cert_dir="${CERT_DIR}/certs/${domain}"
    domain_conf="${VHOSTS}/${domain}.conf"

    if [ "${CERT_CHALLENGE_TYPE}" = "alpn" ]; then
        if [ "x$(grep -E 'listen .*\b443\b' "${domain_conf}")" != "x" ]; then
            sed -i -E 's/(listen .*)\b443\b(.*);/\120443\2;/g;' "${domain_conf}"
        fi
    fi
    if [ ! -e "${domain_sub_dir}/01_ssl.conf" ]; then
        sed -i -E 's/(listen .+)\s+ssl(.*);/\1 \2;/g;' "${domain_conf}"
    fi

    eval "${ACME_CMD} -d ${domain} \
            --cert-file '${domain_cert_dir}/cert.pem' \
            --key-file '${domain_cert_dir}/privkey.pem' \
            --fullchain-file '${domain_cert_dir}/fullchain.pem' \
            2>/dev/null"
    if [ "$?" -ne "0" ]; then
        continue
    fi
    if [ "x$(grep -E 'listen .*ssl' "${domain_conf}")" = "x" ]; then
        sed -i -E 's/(listen .+);/\1 ssl;/g;' "${domain_conf}"
    fi

    mkdir -p "${domain_sub_dir}" "${domain_log_dir}"
    chown -R nginx "${domain_log_dir}"

    echo "# SSL and OCSP Stapling
ssl_stapling on;
ssl_stapling_verify on;

ssl_certificate ${domain_cert_dir}/cert.pem;
ssl_certificate_key ${domain_cert_dir}/privkey.pem;
ssl_trusted_certificate ${domain_cert_dir}/fullchain.pem;
" > "${domain_sub_dir}/01_ssl.conf"

    echo "# Error and access log
error_log ${domain_log_dir}/error.log debug;
access_log ${domain_log_dir}/access\$logdate.log main;
" > "${domain_sub_dir}/02_log.conf"

    echo "# Custom error page
include /etc/nginx/epage.d/*.conf;
" > "${domain_sub_dir}/03_epage.conf"
done

rm ${LOCK}
