#!/bin/sh

VHOSTS=${VHOSTD}
CERTS=${CERTBOT}/live
LOG=${NGINX_SITES_LOG}
# NOTE: All cluster nodes should share challenges
WEBROOT=${CERTBOT}
LOCK=${CERTBOT}/.lck

if [ "x$LOCK" = "x" ]; then
    echo "CERTBOT_LOCK is undefined."
    exit 1
fi

if [ -e ${LOCK} ]; then
    echo "Other is updating certs now. Exit!"
    exit 0
else
    touch ${LOCK}
fi

rm -f /etc/letsencrypt/domains.txt
# include /etc/nginx/vhost.d/<domain-name>/*.conf;
DOMAINS=`find ${VHOSTS} -maxdepth 1 -name "*.conf" -exec grep -E "\binclude\s+${VHOSTS}/.+;" {} \; | sed -E "s/.*\binclude\b.*\/([^\/]+)\/[^\/]+/\1/g;" | sort | uniq`
for domain in `echo $DOMAINS | sed "s/\s\+/\n/g"`; do
    subdir=${VHOSTS}/${domain}
    conf=${CERTS}/${domain}
    log=${LOG}/${domain}

    mkdir -p ${subdir} ${log}
    chown -R nginx ${log}

    echo $domain >> /etc/letsencrypt/domains.txt

    echo "# SSL and OCSP Stapling
# ssl_stapling on;
# ssl_stapling_verify on;

# fallback certs, make sure to create them before hand
ssl_certificate /etc/nginx/ssl/acme/default.pem;
ssl_certificate_key /etc/nginx/ssl/acme/default.key;
ssl_certificate_by_lua_block {
    require(\"resty.acme.autossl\").ssl_certificate()
}

location /.well-known {
    content_by_lua_block {
        require(\"resty.acme.autossl\").serve_http_challenge()
    }
}
" > ${subdir}/01_ssl.conf

    echo "# Error and access log
error_log ${log}/error.log debug;
access_log ${log}/access\$logdate.log main;
" > ${subdir}/02_log.conf

    echo "# Custom error page
include /etc/nginx/epage.d/*.conf;
" > ${subdir}/03_epage.conf
done

rm ${LOCK}
